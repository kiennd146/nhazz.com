--- ./components/com_content/models/category.php	2012-09-12 18:09:02.000000000 -0700
+++ ./components/com_contact/models/category.php	2012-09-12 18:09:02.000000000 -0700
@@ -1,24 +1,21 @@
 <?php
 /**
- * @package		Joomla.Site
- * @subpackage	com_content
+bv * @package		Joomla.Site
+ * @subpackage	com_contact
  * @copyright	Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved.
  * @license		GNU General Public License version 2 or later; see LICENSE.txt
  */
 
+// No direct access
 defined('_JEXEC') or die;
 
 jimport('joomla.application.component.modellist');
 
 /**
- * This models supports retrieving a category, the articles associated with the category,
- * sibling, child and parent categories.
- *
  * @package		Joomla.Site
- * @subpackage	com_content
- * @since		1.5
+ * @subpackage	com_contact
  */
-class ContentModelCategory extends JModelList
+class ContactModelCategory extends JModelList
 {
 	/**
 	 * Category items data
@@ -36,13 +33,6 @@
 	protected $_parent = null;
 
 	/**
-	 * Model context string.
-	 *
-	 * @var		string
-	 */
-	protected $_context = 'com_content.category';
-
-	/**
 	 * The category that applies.
 	 *
 	 * @access	protected
@@ -70,23 +60,16 @@
 		if (empty($config['filter_fields'])) {
 			$config['filter_fields'] = array(
 				'id', 'a.id',
-				'title', 'a.title',
-				'alias', 'a.alias',
-				'checked_out', 'a.checked_out',
-				'checked_out_time', 'a.checked_out_time',
-				'catid', 'a.catid', 'category_title',
+				'name', 'a.name',
+				'con_position', 'a.con_position',
+				'suburb', 'a.suburb',
 				'state', 'a.state',
-				'access', 'a.access', 'access_level',
-				'created', 'a.created',
-				'created_by', 'a.created_by',
-				'modified', 'a.modified',
+				'country', 'a.country',
 				'ordering', 'a.ordering',
-				'featured', 'a.featured',
-				'language', 'a.language',
-				'hits', 'a.hits',
-				'publish_up', 'a.publish_up',
-				'publish_down', 'a.publish_down',
-				'author', 'a.author'
+				'sortname',
+				'sortname1', 'a.sortname1',
+				'sortname2', 'a.sortname2',
+				'sortname3', 'a.sortname3'
 			);
 		}
 
@@ -94,198 +77,173 @@
 	}
 
 	/**
-	 * Method to auto-populate the model state.
-	 *
-	 * Note. Calling getState in this method will result in recursion.
+	 * Method to get a list of items.
 	 *
-	 * return	void
-	 * @since	1.6
+	 * @return	mixed	An array of objects on success, false on failure.
 	 */
-	protected function populateState($ordering = null, $direction = null)
+	public function getItems()
 	{
-		// Initiliase variables.
-		$app	= JFactory::getApplication('site');
-		$pk		= JRequest::getInt('id');
-
-		$this->setState('category.id', $pk);
-
-		// Load the parameters. Merge Global and Menu Item params into new object
-		$params = $app->getParams();
-		$menuParams = new JRegistry;
+		// Invoke the parent getItems method to get the main list
+		$items = parent::getItems();
 
-		if ($menu = $app->getMenu()->getActive()) {
-			$menuParams->loadString($menu->params);
+		// Convert the params field into an object, saving original in _params
+		for ($i = 0, $n = count($items); $i < $n; $i++) {
+			$item = &$items[$i];
+			if (!isset($this->_params)) {
+				$params = new JRegistry();
+				$params->loadString($item->params);
+				$item->params = $params;
+			}
 		}
 
-		$mergedParams = clone $menuParams;
-		$mergedParams->merge($params);
+		return $items;
+	}
 
-		$this->setState('params', $mergedParams);
-		$user		= JFactory::getUser();
-				// Create a new query object.
+	/**
+	 * Method to build an SQL query to load the list data.
+	 *
+	 * @return	string	An SQL query
+	 * @since	1.6
+	 */
+	protected function getListQuery()
+	{
+		$user	= JFactory::getUser();
+		$groups	= implode(',', $user->getAuthorisedViewLevels());
+
+		// Create a new query object.
 		$db		= $this->getDbo();
 		$query	= $db->getQuery(true);
-		$groups	= implode(',', $user->getAuthorisedViewLevels());
 
-		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){
-			// limit to published for people who can't edit or edit.state.
-			$this->setState('filter.published', 1);
-			// Filter by start and end dates.
-			$nullDate = $db->Quote($db->getNullDate());
-			$nowDate = $db->Quote(JFactory::getDate()->toSQL());
+		// Select required fields from the categories.
+		//sqlsrv changes
+		$case_when = ' CASE WHEN ';
+		$case_when .= $query->charLength('a.alias');
+		$case_when .= ' THEN ';
+		$a_id = $query->castAsChar('a.id');
+		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');
+		$case_when .= ' ELSE ';
+		$case_when .= $a_id.' END as slug';
+
+		$case_when1 = ' CASE WHEN ';
+		$case_when1 .= $query->charLength('c.alias');
+		$case_when1 .= ' THEN ';
+		$c_id = $query->castAsChar('c.id');
+		$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');
+		$case_when1 .= ' ELSE ';
+		$case_when1 .= $c_id.' END as catslug';
+		$query->select($this->getState('list.select', 'a.*') . ','.$case_when.','.$case_when1);
+	//	. ' CASE WHEN CHAR_LENGTH(a.alias) THEN CONCAT_WS(\':\', a.id, a.alias) ELSE a.id END as slug, '
+	//	. ' CASE WHEN CHAR_LENGTH(c.alias) THEN CONCAT_WS(\':\', c.id, c.alias) ELSE c.id END AS catslug ');
+		$query->from($db->quoteName('#__contact_details').' AS a');
+		$query->join('LEFT', '#__categories AS c ON c.id = a.catid');
+		$query->where('a.access IN ('.$groups.')');
+
+
+		// Filter by category.
+		if ($categoryId = $this->getState('category.id')) {
+			$query->where('a.catid = '.(int) $categoryId);
+			$query->where('c.access IN ('.$groups.')');
+		}
+
+		// Join over the users for the author and modified_by names.
+		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author");
+		$query->select("ua.email AS author_email");
+
+		$query->join('LEFT', '#__users AS ua ON ua.id = a.created_by');
+		$query->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');
+
+		// Filter by state
+		$state = $this->getState('filter.published');
+		if (is_numeric($state)) {
+			$query->where('a.published = '.(int) $state);
+		}
+		// Filter by start and end dates.
+		$nullDate = $db->Quote($db->getNullDate());
+		$nowDate = $db->Quote(JFactory::getDate()->toSql());
 
+		if ($this->getState('filter.publish_date')){
 			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')');
 			$query->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');
 		}
-		else {
-			$this->setState('filter.published', array(0, 1, 2));
-		}
 
-		// process show_noauth parameter
-		if (!$params->get('show_noauth')) {
-			$this->setState('filter.access', true);
-		}
-		else {
-			$this->setState('filter.access', false);
+		// Filter by language
+		if ($this->getState('filter.language')) {
+			$query->where('a.language in (' . $db->Quote(JFactory::getLanguage()->getTag()) . ',' . $db->Quote('*') . ')');
 		}
 
-		// Optional filter text
-		$this->setState('list.filter', JRequest::getString('filter-search'));
-
-		// filter.order
-		$itemid = JRequest::getInt('id', 0) . ':' . JRequest::getInt('Itemid', 0);
-		$orderCol = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');
-		if (!in_array($orderCol, $this->filter_fields)) {
-			$orderCol = 'a.ordering';
-		}
-		$this->setState('list.ordering', $orderCol);
-
-		$listOrder = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir',
-			'filter_order_Dir', '', 'cmd');
-		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', ''))) {
-			$listOrder = 'ASC';
-		}
-		$this->setState('list.direction', $listOrder);
-
-		$this->setState('list.start', JRequest::getUInt('limitstart', 0));
-
-		// set limit for query. If list, use parameter. If blog, add blog parameters for limit.
-		if ((JRequest::getCmd('layout') == 'blog') || $params->get('layout_type') == 'blog') {
-			$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');
-			$this->setState('list.links', $params->get('num_links'));
-		}
-		else {
-			$limit = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');
-		}
-
-		$this->setState('list.limit', $limit);
-
-		// set the depth of the category query based on parameter
-		$showSubcategories = $params->get('show_subcategory_content', '0');
-
-		if ($showSubcategories) {
-			$this->setState('filter.max_category_levels', $params->get('show_subcategory_content', '1'));
-			$this->setState('filter.subcategories', true);
+		// Set sortname ordering if selected
+		if ($this->getState('list.ordering') == 'sortname') {
+			$query->order($db->escape('a.sortname1').' '.$db->escape($this->getState('list.direction', 'ASC')));
+			$query->order($db->escape('a.sortname2').' '.$db->escape($this->getState('list.direction', 'ASC')));
+			$query->order($db->escape('a.sortname3').' '.$db->escape($this->getState('list.direction', 'ASC')));
+		} else {
+			$query->order($db->escape($this->getState('list.ordering', 'a.ordering')).' '.$db->escape($this->getState('list.direction', 'ASC')));
 		}
 
-
-
-		$this->setState('filter.language', $app->getLanguageFilter());
-
-		$this->setState('layout', JRequest::getCmd('layout'));
-
+		return $query;
 	}
 
 	/**
-	 * Get the articles in the category
+	 * Method to auto-populate the model state.
 	 *
-	 * @return	mixed	An array of articles or false if an error occurs.
-	 * @since	1.5
+	 * Note. Calling getState in this method will result in recursion.
+	 *
+	 * @since	1.6
 	 */
-	function getItems()
+	protected function populateState($ordering = null, $direction = null)
 	{
-		$params = $this->getState()->get('params');
-		$limit = $this->getState('list.limit');
-
-		if ($this->_articles === null && $category = $this->getCategory()) {
-			$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));
-			$model->setState('params', JFactory::getApplication()->getParams());
-			$model->setState('filter.category_id', $category->id);
-			$model->setState('filter.published', $this->getState('filter.published'));
-			$model->setState('filter.access', $this->getState('filter.access'));
-			$model->setState('filter.language', $this->getState('filter.language'));
-			$model->setState('list.ordering', $this->_buildContentOrderBy());
-			$model->setState('list.start', $this->getState('list.start'));
-			$model->setState('list.limit', $limit);
-			$model->setState('list.direction', $this->getState('list.direction'));
-			$model->setState('list.filter', $this->getState('list.filter'));
-			// filter.subcategories indicates whether to include articles from subcategories in the list or blog
-			$model->setState('filter.subcategories', $this->getState('filter.subcategories'));
-			$model->setState('filter.max_category_levels', $this->setState('filter.max_category_levels'));
-			$model->setState('list.links', $this->getState('list.links'));
-
-			if ($limit >= 0) {
-				$this->_articles = $model->getItems();
-
-				if ($this->_articles === false) {
-					$this->setError($model->getError());
-				}
-			}
-			else {
-				$this->_articles=array();
-			}
-
-			$this->_pagination = $model->getPagination();
+		// Initialise variables.
+		$app	= JFactory::getApplication();
+		$params	= JComponentHelper::getParams('com_contact');
+		$db		= $this->getDbo();
+		// List state information
+		$format = JRequest::getWord('format');
+		if ($format=='feed') {
+			$limit = $app->getCfg('feed_limit');
+		}
+		else {
+			$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');
 		}
+		$this->setState('list.limit', $limit);
 
-		return $this->_articles;
-	}
+		$limitstart = JRequest::getUInt('limitstart', 0);
+		$this->setState('list.start', $limitstart);
 
-	/**
-	 * Build the orderby for the query
-	 *
-	 * @return	string	$orderby portion of query
-	 * @since	1.5
-	 */
-	protected function _buildContentOrderBy()
-	{
-		$app		= JFactory::getApplication('site');
-		$db			= $this->getDbo();
-		$params		= $this->state->params;
-		$itemid		= JRequest::getInt('id', 0) . ':' . JRequest::getInt('Itemid', 0);
-		$orderCol	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');
-		$orderDirn	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');
-		$orderby	= ' ';
-
-		if (!in_array($orderCol, $this->filter_fields)) {
-			$orderCol = null;
+		// Get list ordering default from the parameters
+		$menuParams = new JRegistry();
+		if ($menu = $app->getMenu()->getActive()) {
+			$menuParams->loadString($menu->params);
 		}
+		$mergedParams = clone $params;
+		$mergedParams->merge($menuParams);
 
-		if (!in_array(strtoupper($orderDirn), array('ASC', 'DESC', ''))) {
-			$orderDirn = 'ASC';
+		$orderCol	= JRequest::getCmd('filter_order', $mergedParams->get('initial_sort', 'ordering'));
+		if (!in_array($orderCol, $this->filter_fields)) {
+			$orderCol = 'ordering';
 		}
+		$this->setState('list.ordering', $orderCol);
 
-		if ($orderCol && $orderDirn) {
-			$orderby .= $db->escape($orderCol) . ' ' . $db->escape($orderDirn) . ', ';
+		$listOrder	=  JRequest::getCmd('filter_order_Dir', 'ASC');
+		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', ''))) {
+			$listOrder = 'ASC';
 		}
+		$this->setState('list.direction', $listOrder);
 
-		$articleOrderby		= $params->get('orderby_sec', 'rdate');
-		$articleOrderDate	= $params->get('order_date');
-		$categoryOrderby	= $params->def('orderby_pri', '');
-		$secondary			= ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';
-		$primary			= ContentHelperQuery::orderbyPrimary($categoryOrderby);
-
-		$orderby .= $db->escape($primary) . ' ' . $db->escape($secondary) . ' a.created ';
+		$id = JRequest::getVar('id', 0, '', 'int');
+		$this->setState('category.id', $id);
 
-		return $orderby;
-	}
+		$user = JFactory::getUser();
+		if ((!$user->authorise('core.edit.state', 'com_contact')) &&  (!$user->authorise('core.edit', 'com_contact'))){
+			// limit to published for people who can't edit or edit.state.
+			$this->setState('filter.published', 1);
 
-	public function getPagination()
-	{
-		if (empty($this->_pagination)) {
-			return null;
+			// Filter by start and end dates.
+			$this->setState('filter.publish_date', true);
 		}
-		return $this->_pagination;
+		$this->setState('filter.language', $app->getLanguageFilter());
+
+		// Load the parameters.
+		$this->setState('params', $params);
 	}
 
 	/**
@@ -298,42 +256,33 @@
 	 */
 	public function getCategory()
 	{
-		if (!is_object($this->_item)) {
-			if( isset( $this->state->params ) ) {
-				$params = $this->state->params;
-				$options = array();
-				$options['countItems'] = $params->get('show_cat_num_articles', 1) || !$params->get('show_empty_categories_cat', 0);
-			}
-			else {
-				$options['countItems'] = 0;
+		if(!is_object($this->_item))
+		{
+			$app = JFactory::getApplication();
+			$menu = $app->getMenu();
+			$active = $menu->getActive();
+			$params = new JRegistry();
+
+			if($active)
+			{
+				$params->loadString($active->params);
 			}
 
-			$categories = JCategories::getInstance('Content', $options);
+			$options = array();
+			$options['countItems'] = $params->get('show_cat_items', 1) || $params->get('show_empty_categories', 0);
+			$categories = JCategories::getInstance('Contact', $options);
 			$this->_item = $categories->get($this->getState('category.id', 'root'));
-
-			// Compute selected asset permissions.
-			if (is_object($this->_item)) {
-				$user	= JFactory::getUser();
-				$userId	= $user->get('id');
-				$asset	= 'com_content.category.'.$this->_item->id;
-
-				// Check general create permission.
-				if ($user->authorise('core.create', $asset)) {
-					$this->_item->getParams()->set('access-create', true);
-				}
-
-				// TODO: Why aren't we lazy loading the children and siblings?
+			if(is_object($this->_item))
+			{
 				$this->_children = $this->_item->getChildren();
 				$this->_parent = false;
-
-				if ($this->_item->getParent()) {
+				if($this->_item->getParent())
+				{
 					$this->_parent = $this->_item->getParent();
 				}
-
 				$this->_rightsibling = $this->_item->getSibling();
 				$this->_leftsibling = $this->_item->getSibling(false);
-			}
-			else {
+			} else {
 				$this->_children = false;
 				$this->_parent = false;
 			}
@@ -343,49 +292,41 @@
 	}
 
 	/**
-	 * Get the parent categorie.
+	 * Get the parent category.
 	 *
 	 * @param	int		An optional category id. If not supplied, the model state 'category.id' will be used.
 	 *
 	 * @return	mixed	An array of categories or false if an error occurs.
-	 * @since	1.6
 	 */
 	public function getParent()
 	{
-		if (!is_object($this->_item)) {
+		if(!is_object($this->_item))
+		{
 			$this->getCategory();
 		}
-
 		return $this->_parent;
 	}
 
 	/**
-	 * Get the left sibling (adjacent) categories.
+	 * Get the sibling (adjacent) categories.
 	 *
 	 * @return	mixed	An array of categories or false if an error occurs.
-	 * @since	1.6
 	 */
 	function &getLeftSibling()
 	{
-		if (!is_object($this->_item)) {
+		if(!is_object($this->_item))
+		{
 			$this->getCategory();
 		}
-
 		return $this->_leftsibling;
 	}
 
-	/**
-	 * Get the right sibling (adjacent) categories.
-	 *
-	 * @return	mixed	An array of categories or false if an error occurs.
-	 * @since	1.6
-	 */
 	function &getRightSibling()
 	{
-		if (!is_object($this->_item)) {
+		if(!is_object($this->_item))
+		{
 			$this->getCategory();
 		}
-
 		return $this->_rightsibling;
 	}
 
@@ -395,23 +336,13 @@
 	 * @param	int		An optional category id. If not supplied, the model state 'category.id' will be used.
 	 *
 	 * @return	mixed	An array of categories or false if an error occurs.
-	 * @since	1.6
 	 */
 	function &getChildren()
 	{
-		if (!is_object($this->_item)) {
+		if(!is_object($this->_item))
+		{
 			$this->getCategory();
 		}
-
-		// Order subcategories
-		if (sizeof($this->_children)) {
-			$params = $this->getState()->get('params');
-			if ($params->get('orderby_pri') == 'alpha' || $params->get('orderby_pri') == 'ralpha') {
-				jimport('joomla.utilities.arrayhelper');
-				JArrayHelper::sortObjects($this->_children, 'title', ($params->get('orderby_pri') == 'alpha') ? 1 : -1);
-			}
-		}
-
 		return $this->_children;
 	}
 }
